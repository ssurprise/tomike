apply plugin: 'com.android.application'// 表示这是一个应用程序模块
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'// kotlin的注解处理器插件
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion // 设置编译时用的的Android版本
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    // 设置编译时使用的构建工具的版本，Android Studio3.0后去除此项配置

    defaultConfig {// 设置一些默认属性
        applicationId "com.skx.tomike"
        minSdkVersion rootProject.ext.android.minSdkVersion // 项目最低兼容的版本
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 140
        versionName "1.40.00"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        ndk {
            //设置支持的so库架构，每一种 CPU 构架，都定义了一种 ABI（Application Binary Interface），ABI 决定了二进制文件如何与系统进行交互
            abiFilters 'armeabi', 'x86'//, 'x86','armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        // 用于指定生成正式版安装文件的配置
        release {
            minifyEnabled true // 设置是否执行代码缩减（混淆）
            zipAlignEnabled true //设置是否对APK包执行ZIP对齐优化
            shrinkResources true //资源缩减器可以识别应用程序仍在使用哪些资源，未被使用的资源，将会被资源缩减器移除
            debuggable false //设置生成的APK是否支持调试本地代码
            /* 混淆规则配置文件 */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            /* 混淆规则配置文件 */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {// 配置目录指向
        main {
            jniLibs.srcDirs = ['libs']
            // 可以在Android studio的Android视图下生成jniLibs文件夹，可以方便我们存放jar包和库文件，其中Android视图下的jniLibs和project视图下的libs指向同一文件夹（app→libs）
        }
    }

    // 使用packagingOptions排除不想添加到apk中的文件
    packagingOptions {
        // eg:要不然在华为的机器上运行不了
//        exclude 'lib/arm64-v8a/libcardioDecider.so'
//        exclude 'lib/arm64-v8a/libcardioRecognizer.so'
//        exclude 'lib/arm64-v8a/libcardioRecognizer_tegra2.so'
    }
}

dependencies {
    // 本地二进制文件依赖项。声明了对项目的 module_name/libs/ 目录中 JAR、AAR 文件的依赖关系（因为 Gradle 会读取 build.gradle 文件的相对路径）。
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

    // 本地库模块依赖项，表示申明了对一个名为"xxx"的Android 库模块的依赖关系。
    implementation project(':common')
    implementation project(':missile')
    implementation project(':tank')
    implementation project(':cannon')
    implementation project(':bomber')

    // 依赖的远程库
    def implementationDependencies = rootProject.ext.implementationDependencies
    implementationDependencies.each { key, value -> implementation value }
    // implementation 'com.example.android:app-magic:12.3'
    // 是 implementation group: 'com.example.android', name: 'app-magic', version: '12.3' 的简写形式

    def annotationKpt = rootProject.ext.annotationKpt
    annotationKpt.each { key, value -> kapt value }

    // Dependency on a local library module
    implementation project(":apt-annotation")
    annotationProcessor project(":apt-processor")
}

repositories {
    mavenCentral()
}
